import requests
from requests.auth import HTTPBasicAuth
import json

urlUpsource = 'url upsource'
loginUpsource = 'login upsource'
passUpsource = 'password upsource'

urlOnevizion = 'url onevizion'
loginOnevizion = 'login onevizion'
passOnevizion = 'password onevizion'
projectName = 'project name'

authUpsource = HTTPBasicAuth(loginUpsource, passUpsource)
authOnevizion = HTTPBasicAuth(loginOnevizion, passOnevizion)
headers = {'Content-type':'application/json','Content-Encoding':'utf-8'}

#Returns short review information for a set of revisions
def reviewInfo():
    for revisionId in revisionList():
        url = urlUpsource + '~rpc/getRevisionReviewInfo'
        data = {"projectId":projectName, "revisionId":revisionId['revisionId']}
        answer = requests.post(url, headers=headers, data=json.dumps(data), auth=authUpsource)
        response = answer.json()
        readble_json = response['result']['reviewInfo']
        if readble_json == [{}]:
            for issueTitle in checkIssue(getIssueTitle(revisionId['revisionCommitMessage'])):
                if issueTitle['IS_ISSUE_STATUS'] == 'Ready for Review':
                   createReview(revisionId['revisionId'])
        elif readble_json is not None:
            for issues in readble_json:
                for iss in issues:
                    iss = issues
                    issueTitle = iss['reviewInfo']['title']
                    checkStatus(getIssueTitle(issueTitle), iss['reviewInfo']['state'], revisionBranche(revisionId['revisionId']))

#Returns the list of revisions in a given project
def revisionList():
    url = urlUpsource + '~rpc/getRevisionsList'
    data = {"projectId":projectName, "limit":1000}
    answer = requests.post(url, headers=headers, data=json.dumps(data), auth=authUpsource)
    response = answer.json()
    readble_json = response['result']['revision']
    return readble_json

#Returns issue title
def getIssueTitle(issueTitle):
    if 'Revert \"' in issueTitle:
        return None
    elif 'Review of ' in issueTitle:
        return None
    elif 'Merge branch \"' in issueTitle:
        return None
    elif 'Merge branch \'master\' into ' in issueTitle:
        return None
    else:
        return issueTitle[issueTitle.find('') : issueTitle.find(' ')]

#Checks issue status
def checkIssue(issue):
    url = urlOnevizion + 'api/v3/trackor_types/Issues_Tracker/trackors'
    params = {"fields":"IS_ISSUE_STATUS, XITOR_KEY", "XITOR_KEY":issue}
    answer = requests.get(url, headers=headers, params=params, auth=authOnevizion)
    response = answer.json()
    return response

#Creates review if issue status = 'Ready for Review'
def createReview(revisionId):
    url = urlUpsource + '~rpc/createReview'
    data = {"projectId":projectName, "revisions":revisionId}
    answer = requests.post(url, headers=headers, data=json.dumps(data), auth=authUpsource)

#Returns the list of branches a revision is part of
def revisionBranche(revisionId):
    url = urlUpsource + '~rpc/getRevisionBranches'
    data = {"projectId":projectName, "revisionId":revisionId}
    answer = requests.post(url, headers=headers, data=json.dumps(data), auth=authUpsource)
    response = answer.json()
    readble_json = response['result']['branchName']
    return readble_json

#Checks review status and run updateIssue
def checkStatus(issue, status, branch):
    if issue == 'None':
        return None
    else:
        if status == '2' and branch == 'master':
            updateIssue(issue, 'Ready for Merge')
        elif status == '2' and branch != 'master':
            updateIssue(issue, 'Ready for Test')

#Updates issue status if review status = 2 (closed)
def updateIssue(issue, status):
    for issueTitle in checkIssue(issue):
        if issueTitle['IS_ISSUE_STATUS'] == 'Ready for Review' and status == 'Ready for Merge':
            data = {"IS_ISSUE_STATUS":status}
            url = urlOnevizion + 'api/v3/trackors/' + issueTitle['XITOR_ID']
            answer = requests.post(url, headers=headers, data=data, auth=authOnevizion)
        elif issueTitle['IS_ISSUE_STATUS'] == 'Ready for Review' and status == 'Ready for Test':
            data = {"IS_ISSUE_STATUS":status}
            url = urlOnevizion + 'api/v3/trackors/' + issueTitle['XITOR_ID']
            answer = requests.post(url, headers=headers, data=data, auth=authOnevizion)

def main():
    reviewInfo()

if __name__ == '__main__':
    main()
